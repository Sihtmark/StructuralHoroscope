//
//  Model.swift
//  StructuralHoroscope
//
//  Created by Sergei Poluboiarinov on 31.03.2023.
//

import Foundation

let sampleUser = ClientStruct(name: "–ì–∞–Ω–∏–±–∞–ª –õ–µ–∫—Ç–æ—Ä", birthday: Date(), sex: .male, annualSignStruct: horseSign, month: .february, isFavorite: false)

struct ClientStruct: Identifiable, Codable, Equatable, Hashable {
    var id = UUID()
    var name: String
    var birthday: Date
    var sex: Sex
    var annualSignStruct: AnnualSignStruct
    var month: MonthEnum
    var isFavorite: Bool
    
    func updateInfo(name: String, sex: Sex, birthday: Date, sign: AnnualSignStruct, month: MonthEnum, isFavorite: Bool) -> ClientStruct {
        return ClientStruct(name: name, birthday: birthday, sex: sex, annualSignStruct: sign, month: month, isFavorite: isFavorite)
    }
}

struct SocialSignStruct: Identifiable, Codable, Equatable, Hashable {
    var id = UUID()
    let socialSign: SocialSignEnum
    let emoji: SocialEmojiEnum
    let blocks: [String:String]
}

struct AnnualSignStruct: Identifiable, Codable, Equatable, Hashable {
    var id = UUID()
    let annualSign: AnnualEnum
    let ideologicalType: [Sex: IdeologicalStruct]
    let socialType: SocialStruct
    let psychologicalType: PsychologicalStruct
    let temperament: EnergyStruct
    let fateType: FateStruct
    let ageType: AgeEnum
    let vectorHost: AnnualEnum
    let vectorServant: AnnualEnum
    let vectorMarriage: [AnnualEnum]
    let romanticMarriage: [AnnualEnum]
    let patriarchalMarriage: [AnnualEnum]
    let equalMarriage: [AnnualEnum]
    let spiritualMarriage: [AnnualEnum]
    let clones: [AnnualEnum]
    let companions: [AnnualEnum]
    let subordinates: [AnnualEnum]
    let advisers: [AnnualEnum]
    let socialSigns: [MonthEnum:SocialSignStruct]
    let businessStruct: [AnnualEnum: BusinessEnum]
    let blocks: [String:String]
    let years: [Int]
}

struct MonthStruct: Identifiable, Codable, Equatable, Hashable {
    var id = UUID()
    let sign: MonthEnum
    let days: [Int: ClosedRange<Int>]
}

struct IdeologicalStruct: Identifiable, Codable, Equatable, Hashable {
    var id = UUID()
    let ideologicalType: IdeologicalEnum
    let title: String
    let text: String
    let signs: [AnnualEnum]
}

struct SocialStruct: Identifiable, Codable, Equatable, Hashable {
    var id = UUID()
    let socialType: SocialEnum
    let signs: [AnnualEnum]
    let title: String
    let text: String
}

struct PsychologicalStruct: Identifiable, Codable, Equatable, Hashable {
    var id = UUID()
    let psychologicalType: PsychologicalEnum
    let signs: [AnnualEnum]
    let title: String
    let text: String
}

struct EnergyStruct: Identifiable, Codable, Equatable, Hashable {
    var id = UUID()
    let energyType: EnergyEnum
    let signs: [AnnualEnum]
    let title: String
    let text: String
}

struct FateStruct: Identifiable, Codable, Equatable, Hashable {
    var id = UUID()
    let fateType: FateEnum
    let signs: [AnnualEnum]
    let title: String
    let text: String
}

struct BusinessStruct: Identifiable, Codable, Equatable, Hashable {
    var id = UUID()
    let type: BusinessEnum
    let value: String
    let text: String
    let signs: [AnnualEnum: [AnnualSignStruct]]
}

struct MarriageStruct: Identifiable, Codable, Equatable, Hashable {
    var id = UUID()
    let type: MarriageEnum
    let title: String
    let text: String
    let signs: [AnnualEnum: [AnnualSignStruct]]
}

struct AgeStruct: Identifiable, Codable, Equatable, Hashable {
    var id = UUID()
    let sign: AgeEnum
    let title: String
    let ageTitle: String
    let age–°ommandments: String
    let text: String
}

struct DayStruct: Identifiable, Codable, Hashable {
    var id = UUID()
    let date: Date
    let signs: [AnnualEnum: DayType]
    
    var dateComponents: DateComponents {
        var dateComponents = Calendar.current.dateComponents(
            [.month,
             .day,
             .year],
            from: date)
        dateComponents.timeZone = TimeZone.current
        dateComponents.calendar = Calendar(identifier: .gregorian)
        return dateComponents
    }
}

enum Tab {
    case home
    case info
    case calendar
}

struct DayType: Codable, Hashable, Identifiable {
    var id = UUID()
    let title: String
    let emoji: String
    let text: String?
}

enum AnnualEnum: String, Codable, CaseIterable, Hashable {
    case snake = "–ó–º–µ—è"
    case horse = "–õ–æ—à–∞–¥—å"
    case goat = "–ö–æ–∑–∞"
    case monkey = "–û–±–µ–∑—å—è–Ω–∞"
    case rooster = "–ü–µ—Ç—É—Ö"
    case dog = "–°–æ–±–∞–∫–∞"
    case boar = "–ö–∞–±–∞–Ω"
    case rat = "–ö—Ä—ã—Å–∞"
    case bull = "–ë—ã–∫"
    case tiger = "–¢–∏–≥—Ä"
    case cat = "–ö–æ—Ç"
    case dragon = "–î—Ä–∞–∫–æ–Ω"
}

enum MonthEnum: Codable, CaseIterable, Hashable {
    case april
    case may
    case june
    case july
    case augest
    case september
    case october
    case november
    case december
    case january
    case february
    case march
}

enum SocialSignEnum: String, CaseIterable, Codable, Hashable {
    case king = "–ö–æ—Ä–æ–ª—å"
    case vector = "–í–µ–∫—Ç–æ—Ä"
    case jester = "–®—É—Ç"
    case knight = "–†—ã—Ü–∞—Ä—å"
    case aristocrat = "–ê—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç"
    case professor = "–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä"
    case leader = "–í–æ–∂–¥—å"
}

enum SocialEmojiEnum: String, CaseIterable, Codable, Hashable {
    case king = "üëë"
    case vector = "‚ÜîÔ∏è"
    case jester = "ü§°"
    case knight = "‚öîÔ∏è"
    case aristocrat = "üé©"
    case professor = "üë®‚Äçüè´"
    case leader = "üóΩ"
}

enum BusinessEnum: String, Codable, CaseIterable, Hashable {
    case vectorHost = "–í–µ–∫—Ç–æ—Ä–Ω—ã–π —Ö–æ–∑—è–∏–Ω"
    case vectorServant = "–í–µ–∫—Ç–æ—Ä–Ω—ã–π —Å–ª—É–≥–∞"
    case clone = "–ö–ª–æ–Ω—ã"
    case companion = "–°–æ—Ä–∞—Ç–Ω–∏–∫–∏"
    case subordinate = "–ü–æ–¥—á–∏–Ω–µ–Ω–Ω—ã–µ"
    case adviser = "–°–æ–≤–µ—Ç–Ω–∏–∫–∏"
}

enum MarriageEnum: String, Codable, CaseIterable, Hashable {
    case vector = "–í–µ–∫—Ç–æ—Ä–Ω—ã–π –±—Ä–∞–∫"
    case romantic = "–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –±—Ä–∞–∫"
    case patriarchal = "–ü–∞—Ç—Ä–∏–∞—Ä—Ö–∞–ª—å–Ω—ã–π –±—Ä–∞–∫"
    case equal = "–†–∞–≤–Ω—ã–π –±—Ä–∞–∫"
    case spiritual = "–î—É—Ö–æ–≤–Ω—ã–π –±—Ä–∞–∫"
}

enum AgeEnum: String, Codable, CaseIterable, Hashable {
    case newborn = "–ù–æ–≤–æ—Ä–æ–∂–¥–µ–Ω–Ω–æ–≥–æ 0"
    case baby = "–ú–ª–∞–¥–µ–Ω—Ü–∞ 1-2"
    case preschooler = "–î–æ—à–∫–æ–ª—å–Ω–∏–∫–∞ 3-6"
    case juniorSchoolStudent = "–®–∫–æ–ª—å–Ω–∏–∫–∞ 7-11"
    case teenager = "–ü–æ–¥—Ä–æ—Å—Ç–∫–∞ 12-17"
    case youth = "–°—Ç—É–¥–µ–Ω—Ç–∞ 17-23"
    case intellectual = "–ò–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª–∞ 24-30"
    case trailblazer = "–ù–æ–≤–∞—Ç–æ—Ä–∞ 31-41"
    case success = "–£—Å–ø–µ—à–Ω–æ—Å—Ç–∏ 42-54"
    case teacher = "–£—á–∏—Ç–µ–ª—è 55-70"
    case triumphant = "–¢—Ä–∏—É–º—Ñ–∞—Ç–æ—Ä–∞ 70-84"
    case outgoing = "–£—Ö–æ–¥—è—â–µ–≥–æ 85 - ‚àû"
}

enum IdeologicalEnum: String, Codable, CaseIterable, Hashable {
    case logicalMale = "–ú—É–∂—Å–∫–∞—è –ª–æ–≥–∏–∫–∞"
    case logicalFemale = "–ñ–µ–Ω—Å–∫–∞—è –ª–æ–≥–∏–∫–∞"
    case strongWilledMale = "–ú—É–∂—Å–∫–∞—è –≤–æ–ª—è"
    case strongWilledFemale = "–ñ–µ–Ω—Å–∫–∞—è –≤–æ–ª—è"
    case mysticalMale = "–ú—É–∂—Å–∫–∞—è –º–∏—Å—Ç–∏–∫–∞"
    case mysticalFemale = "–ñ–µ–Ω—Å–∫–∞—è –º–∏—Å—Ç–∏–∫–∞"
    case realisticMale = "–ú—É–∂—Å–∫–æ–π —Ä–µ–∞–ª–∏–∑–º"
    case realisticFemale = "–ñ–µ–Ω—Å–∫–∏–π —Ä–µ–∞–ª–∏–∑–º"
}

enum SocialEnum: String, Codable, CaseIterable, Hashable {
    case closed = "–ó–∞–∫—Ä—ã—Ç—ã–π"
    case opened = "–û—Ç–∫—Ä—ã—Ç—ã–π"
    case orthodox = "–û—Ä—Ç–æ–¥–æ–∫—Å"
}

enum PsychologicalEnum: String, Codable, CaseIterable, Hashable {
    case maturity = "–í–æ–∑–º—É–∂–∞–Ω–∏—è"
    case dreamer = "–í–∑–ª–µ—Ç—ã–π"
    case sensitive = "–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π"
    case grounded = "–ü—Ä–∏–∑–µ–º–ª–µ–Ω–Ω—ã–π"
}

enum EnergyEnum: String, Codable, CaseIterable, Hashable {
    case dramatic = "–î—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∏–π"
    case sanguine = "–ü—Ä–∏—Ä–æ–¥–Ω—ã–π –æ–ø—Ç–∏–º–∏—Å—Ç"
    case phlegmatic = "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –æ–ø—Ç–∏–º–∏—Å—Ç"
    case melancholic = "–°–∫–µ–ø—Ç–∏–∫"
}

enum FateEnum: String, Codable, CaseIterable, Hashable {
    case fatalist = "–§–∞—Ç–∞–ª–∏—Å—Ç"
    case lucky = "–í–µ–∑—É–Ω—á–∏–∫"
    case doItYourself = "–°–∞–º–æ–¥–µ–ª—å—â–∏–∫"
    case pioneer = "–ü–∏–æ–Ω–µ—Ä"
}

enum Sex: String, Codable, CaseIterable, Hashable {
    case male = "–º—É–∂—á–∏–Ω—ã"
    case female = "–∂–µ–Ω—â–∏–Ω—ã"
}

var sampleClient = ClientStruct(
    name: "–ó–∏–Ω–∞–∏–¥–∞",
    birthday: Date(),
    sex: .male,
    annualSignStruct: ViewModel().getAnnualSign(date: Date()) ?? horseSign,
    month: ViewModel().getZodiacSign(date: Date()) ?? .february,
    isFavorite: false
)
